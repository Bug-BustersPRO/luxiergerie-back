name: Publish Docker image

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches: [ "main","dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build
        run: |
          docker compose build
      - name: Start
        run: |
          docker compose up -d
          sleep 15
      - name: Test
        run: |
          cat src/main/resources/import.sql | docker compose exec -T mysqldb mysql -utest -ptest luxiergerie
          docker compose exec luxiergerie-main mvn install
      - name: Push
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< ${{ secrets.DOCKERHUB_TOKEN }}
          docker tag bugbstrspro/luxiergerie:main bugbstrspro/luxiergerie:${GITHUB_REF##*/}
          docker push bugbstrspro/luxiergerie:${GITHUB_REF##*/}
      - name: Connect to EC2, pull and run
        env:
          SPRING_DATASOURCE_URL: ${{ secrets.RDS_ENDPOINT }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.RDS_DATABASE_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.RDS_DATABASE_TOKEN }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << EOF
          cd /home/ubuntu/docker
          sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin <<< ${{ secrets.DOCKERHUB_TOKEN }}
          sudo docker pull bugbstrspro/luxiergerie:${GITHUB_REF##*/}  
                    
          echo SPRING_DATASOURCE_URL=${{ secrets.RDS_ENDPOINT }} > .env
          echo SPRING_DATASOURCE_USERNAME=${{ secrets.RDS_DATABASE_USER }} >> .env
          echo SPRING_DATASOURCE_PASSWORD=${{ secrets.RDS_DATABASE_TOKEN }} >> .env
         
          sudo docker compose down
          sudo docker system prune -a -f
          sudo docker compose --env-file .env up --build -d

          EOF